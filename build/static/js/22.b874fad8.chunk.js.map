{"version":3,"sources":["app/views/tms-auth/JwtLogin.jsx"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","position","background","JWTRoot","minHeight","maxWidth","margin","borderRadius","initialValues","email","password","remember","validationSchema","Yup","shape","required","JwtLogin","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","errMessage","setErrMessage","_useState5","_useState6","showPassword","setShowPassword","login","useAuth","handleFormSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","response","wrap","_context","prev","next","sent","stop","_x","apply","arguments","handleMouseDownPassword","event","preventDefault","handleClickShowPassword","prevState","_jsx","children","Card","className","_jsxs","Grid","container","item","sm","xs","p","sx","minWidth","src","width","alt","Formik","onSubmit","_ref2","errors","touched","handleChange","handleBlur","handleSubmit","TextField","fullWidth","size","name","label","variant","onBlur","value","onChange","helperText","error","Boolean","mb","type","InputProps","endAdornment","InputAdornment","IconButton","onClick","onMouseDown","edge","VisibilityOff","Visibility","gap","Checkbox","checked","Paragraph","LoadingButton","color","my","style"],"mappings":"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","file":"static/js/22.b874fad8.chunk.js","sourcesContent":["import { LoadingButton } from '@mui/lab';\nimport { Card, Checkbox, Grid, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { Box, styled } from '@mui/system';\n// import { Box, styled, useTheme } from '@mui/system';\nimport { Paragraph } from 'app/components/Typography';\nimport useAuth from 'app/hooks/useAuth';\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport { useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\n\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\n\nconst ContentBox = styled(Box)(() => ({\n  height: '100%',\n  padding: '32px',\n  position: 'relative',\n  background: 'rgba(0, 0, 0, 0.01)',\n}));\n\nconst JWTRoot = styled(JustifyBox)(() => ({\n  background: '#1A2038',\n  minHeight: '100% !important',\n  '& .card': {\n    maxWidth: 800,\n    minHeight: 400,\n    margin: '1rem',\n    display: 'flex',\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n}));\n\n// inital login credentials\nconst initialValues = {\n  // email: 'jason@ui-lib.com',\n  // password: 'dummyPass',\n  // remember: true,\n  // email: 'String',\n  // password: 'admin',\n  // remember: true,\n  email: '',\n  password: '',\n  remember: false,\n};\n\n// form field validation schema\nconst validationSchema = Yup.object().shape({\n  password: Yup.string()\n    // .min(6, 'Password must be 6 character length')\n    .required('Password is required!'),\n  email: Yup.string()\n    // .email('Invalid Email address')\n    .required('Email is required!'),\n});\n\nconst JwtLogin = () => {\n  // const theme = useTheme();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [errMessage, setErrMessage] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const { login } = useAuth();\n\n  const handleFormSubmit = async (values) => {\n    setLoading(true);\n    let response = await login(values.email, values.password);\n    // console.log(`jwtLogin res`, response);\n    if (response === `Success`) {\n      navigate('/');\n    } else {\n      setErrMessage(response);\n      setLoading(false);\n    }\n  };\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const handleClickShowPassword = () => {\n    setShowPassword((prevState) => !prevState);\n  };\n\n  return (\n    <JWTRoot>\n      <Card className=\"card\">\n        <Grid container>\n          <Grid item sm={6} xs={12}>\n            <JustifyBox p={4} height=\"100%\" sx={{ minWidth: 320 }}>\n              <img src=\"/assets/images/illustrations/dreamer.svg\" width=\"100%\" alt=\"\" />\n            </JustifyBox>\n          </Grid>\n\n          <Grid item sm={6} xs={12}>\n            <ContentBox>\n              <Formik\n                onSubmit={handleFormSubmit}\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n              >\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n                  <form onSubmit={handleSubmit}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      // type=\"email\"\n                      name=\"email\"\n                      label=\"Email\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.email}\n                      onChange={handleChange}\n                      helperText={touched.email && errors.email}\n                      error={Boolean(errors.email && touched.email)}\n                      sx={{ mb: 3 }}\n                    />\n\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      name=\"password\"\n                      type={showPassword ? 'text' : 'password'}\n                      label=\"Password\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.password}\n                      onChange={handleChange}\n                      helperText={touched.password && errors.password}\n                      error={Boolean(errors.password && touched.password)}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              aria-label=\"toggle password visibility\"\n                              onClick={handleClickShowPassword}\n                              onMouseDown={handleMouseDownPassword}\n                              edge=\"end\"\n                            >\n                              {showPassword ? <VisibilityOff /> : <Visibility />}\n                            </IconButton>\n                          </InputAdornment>\n                        ),\n                      }}\n                      sx={{ mb: 1.5 }}\n                    />\n\n                    <FlexBox justifyContent=\"space-between\">\n                      <FlexBox gap={1}>\n                        <Checkbox\n                          size=\"small\"\n                          name=\"remember\"\n                          onChange={handleChange}\n                          checked={values.remember}\n                          sx={{ padding: 0 }}\n                        />\n\n                        <Paragraph>Remember Me</Paragraph>\n                      </FlexBox>\n\n                      {/* <NavLink\n                        to=\"/session/forgot-password\"\n                        style={{ color: theme.palette.primary.main }}\n                      >\n                        Forgot password?\n                      </NavLink> */}\n                    </FlexBox>\n\n                    <LoadingButton\n                      type=\"submit\"\n                      color=\"primary\"\n                      loading={loading}\n                      variant=\"contained\"\n                      sx={{ my: 2 }}\n                    >\n                      Login\n                    </LoadingButton>\n                    <Paragraph style={{ color: 'red' }}>\n                      {errMessage\n                        ? errMessage === 'Bad credentials'\n                          ? 'Wrong Password'\n                          : errMessage\n                        : ''}\n                    </Paragraph>\n                  </form>\n                )}\n              </Formik>\n            </ContentBox>\n          </Grid>\n        </Grid>\n      </Card>\n    </JWTRoot>\n  );\n};\n\nexport default JwtLogin;\n"],"sourceRoot":""}