{"version":3,"sources":["../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/AddBox.js","app/views/tms-policy/CommandManage/CommandManageTable/BottomBarSetup.js","app/components/List/ListSelect.jsx","app/views/tms-policy/CommandManage/Modal/NewCommandModal.js","app/views/tms-policy/CommandManage/CommandManageTable/TopBarSetup.js","app/views/tms-policy/CommandManage/Modal/EditCommandModal.js","app/views/tms-policy/CommandManage/Modal/CommandNotiIDDetail.js","app/views/tms-policy/CommandManage/CommandManageTable/CommandManageTable.js","app/views/tms-policy/CommandManage/CommandManage.js"],"names":["createSvgIcon","_jsx","d","BottomBarSetup","props","paramsPageDevices","totalPage","handleMoveToPrePage","handleMoveToNextPage","_jsxs","Grid","container","fullWidth","children","item","lg","md","sm","xs","style","display","justifyContent","Tooltip","title","IconButton","disabled","page","onClick","NavigateBefore","NavigateNextIcon","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","width","getStyles","data","selected","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","ListSelect","handleSelected","defaultValue","useTheme","_React$useState","React","_React$useState2","_slicedToArray","setSelected","FormControl","sx","InputLabel","id","Select","labelId","value","onChange","event","target","input","OutlinedInput","label","map","MenuItem","AutoComplete","_ref","selectedOption","setSelectedOption","_useState","useState","_useState2","arrNotiId","setArrNotiId","_useState3","limit","search","_useState4","paramsPage","setParamPage","_useState5","_useState6","hasSelected","setHasSelected","handleBarSearch","_objectSpread","handleLoadAPagePolicy","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","arr","wrap","_context","prev","next","getNotiID","sent","status","listResult","stop","apply","arguments","useEffect","Autocomplete","options","getOptionLabel","option","newValue","renderInput","params","TextField","variant","NewCommandModal","setResettable","_useState7","_useState8","openModal","setOpenModal","_useState9","_useState10","name","setName","_useState11","_useState12","command","setCommand","handleCloseModalNewPolicy","prevState","checkValidateInput","check","inputValues","commandNotificationId","requiredInputs","push","i","length","toast","info","handleAddNew","_ref3","_callee2","newListDevices","_context2","postCreateNewCommand","statusCode","message","includes","error","success","_Fragment","arrow","placement","AddBox","color","Modal","open","onClose","Box","position","top","left","transform","bgcolor","boxShadow","p","minWidth","minHeight","Typography","component","gutterBottom","spacing","margin","e","handleOnchangeInput","marginTop","Button","type","TopBarSetup","searchTerm","setSearchTerm","handleResetTable","handleSearchMode","isSearchTermEmpty","trim","placeholder","size","edge","InputProps","endAdornment","InputAdornment","Divider","height","m","orientation","helperText","SearchIcon","Close","RestartAlt","defaultNoti","defaultNotiObj","find","EditCommandModal","row","setUpdatetable","original","preCommand","preName","prevNoti","handleCloseModalEditDescription","handleEditCommand","abrupt","putEditCommand","Edit","marginLeft","textTransform","handleNameChange","CommandNotiIDDetail","setData","handleLoadDetailCommand","getSingleNotiID","InfoIcon","createdBy","convertDateTime","createdDate","modifiedBy","modifiedDate","CommandManageTable","arrPolicy","setArrPolicy","policyname","setTotalPage","updateTable","setUpdateTable","resetTable","setResetTable","getAPageCommand","totalElement","columns","accessorKey","header","enableEditing","enableFilters","muiTableHeadCellProps","align","muiTableBodyCellProps","Cell","enableSorting","Card","ThemeProvider","tableTheme","MaterialReactTable","actionsColumnIndex","enableExpanding","enableGlobalFilter","enableColumnFilters","enableColumnActions","enablePagination","muiTableBodyRowProps","hover","defaultColumn","maxSize","minSize","initialState","columnVisibility","columnOrder","renderRowActionMenuItems","table","closeMenu","flexBasis","displayColumnDefOptions","renderDetailPanel","gridTemplateColumns","alignItems","fontSize","renderBottomToolbarCustomActions","renderTopToolbarCustomActions","PolicyManage","Container","Breadcrumb","routeSegments","path","Stack","CommandManagementTable"],"mappings":"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","file":"static/js/15.bf87481c.chunk.js","sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n}), 'AddBox');","import React from 'react';\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\nimport { IconButton, Grid, Tooltip } from '@mui/material';\r\nimport { NavigateBefore } from '@mui/icons-material';\r\n\r\nconst BottomBarSetup = (props) => {\r\n  const { paramsPageDevices, totalPage, handleMoveToPrePage, handleMoveToNextPage } = props;\r\n\r\n  return (\r\n    <Grid container fullWidth>\r\n      <Grid\r\n        item\r\n        lg={8}\r\n        md={8}\r\n        sm={12}\r\n        xs={12}\r\n        style={{ display: 'flex', justifyContent: 'flex-end' }}\r\n      ></Grid>\r\n      <Grid\r\n        item\r\n        lg={4}\r\n        md={4}\r\n        sm={12}\r\n        xs={12}\r\n        style={{ display: 'flex', justifyContent: 'flex-end' }}\r\n      >\r\n        <span>\r\n          <Tooltip title=\"Previous page\">\r\n            <IconButton disabled={paramsPageDevices.page === 1} onClick={handleMoveToPrePage}>\r\n              <NavigateBefore />\r\n            </IconButton>\r\n          </Tooltip>\r\n          Page {paramsPageDevices.page} of {totalPage}\r\n          <Tooltip title=\"Next page\">\r\n            <IconButton\r\n              disabled={paramsPageDevices.page === totalPage}\r\n              onClick={handleMoveToNextPage}\r\n            >\r\n              <NavigateNextIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </span>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default BottomBarSetup;\r\n","import * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\nconst ITEM_HEIGHT = 35;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nfunction getStyles(data, selected, theme) {\r\n  return {\r\n    fontWeight:\r\n      selected.indexOf(data) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nexport default function ListSelect(props) {\r\n  const { data, handleSelected, title, defaultValue } = props;\r\n  const theme = useTheme();\r\n  const [selected, setSelected] = React.useState([]);\r\n\r\n  const handleChange = (event) => {\r\n    setSelected(event.target.value);\r\n    handleSelected(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl sx={{ width: '100%' }}>\r\n        <InputLabel id=\"list-select\">{title}</InputLabel>\r\n        <Select\r\n          labelId=\"list-select\"\r\n          id=\"list-select\"\r\n          value={defaultValue ? defaultValue : ''}\r\n          //   defaultValue={defaultValue}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput label={title} />}\r\n          MenuProps={MenuProps}\r\n        >\r\n          {data.map((data) => (\r\n            <MenuItem key={data} value={data} style={getStyles(data, selected, theme)}>\r\n              {data}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  Button,\r\n  Modal,\r\n  Typography,\r\n  TextField,\r\n  Grid,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport { AddBox } from '@mui/icons-material';\r\nimport { getNotiID, postCreateNewCommand } from 'app/Services/PolicyServices';\r\nimport ListSelect from 'app/components/List/ListSelect';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\n\r\nfunction AutoComplete({ label, selectedOption, setSelectedOption }) {\r\n  const [arrNotiId, setArrNotiId] = useState([]);\r\n  const [paramsPage, setParamPage] = useState({\r\n    page: 1,\r\n    limit: 10,\r\n    search: null,\r\n  });\r\n  const [hasSelected, setHasSelected] = useState(false);\r\n\r\n  const handleBarSearch = (event) => {\r\n    setParamPage({ ...paramsPage, search: event.target.value });\r\n    setHasSelected(false);\r\n  };\r\n\r\n  const handleLoadAPagePolicy = async () => {\r\n    let response = await getNotiID(paramsPage);\r\n    if (response.status === 200) {\r\n      let arr = response.data.listResult;\r\n      // console.log(arr);\r\n      setArrNotiId(arr);\r\n    }\r\n  };\r\n\r\n  const handleOnChange = (event, newValue) => {\r\n    setSelectedOption(newValue);\r\n    setHasSelected(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleLoadAPagePolicy();\r\n  }, [paramsPage]);\r\n\r\n  useEffect(() => {\r\n    if (!hasSelected) {\r\n      setParamPage({ ...paramsPage, search: null });\r\n    }\r\n  }, [hasSelected]);\r\n\r\n  return (\r\n    <div>\r\n      <Autocomplete\r\n        options={arrNotiId}\r\n        getOptionLabel={(option) => option.title}\r\n        id=\"include-input-in-list\"\r\n        value={selectedOption}\r\n        onChange={handleOnChange}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label={label}\r\n            variant=\"outlined\"\r\n            onChange={handleBarSearch}\r\n            fullWidth\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NewCommandModal = (props) => {\r\n  const { setResettable } = props;\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [command, setCommand] = useState('');\r\n  const [selectedOption, setSelectedOption] = React.useState(null);\r\n  const Noti = ['Reboot', 'Notification'];\r\n\r\n  const handleCreatePolicyClick = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n  };\r\n\r\n  const handleCloseModalNewPolicy = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n    setCommand('');\r\n    setName('');\r\n  };\r\n\r\n  const handleCommandChange = (command) => {\r\n    setCommand(command);\r\n  };\r\n\r\n  const handleOnchangeInput = (e, id) => {\r\n    switch (id) {\r\n      case 'name':\r\n        setName(e.target.value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  const checkValidateInput = () => {\r\n    let check = true;\r\n    const inputValues = {\r\n      name: name,\r\n      command: command,\r\n      commandNotificationId: selectedOption.id,\r\n    };\r\n    const requiredInputs = ['command', 'name'];\r\n    if (command === 'Notification') {\r\n      requiredInputs.push('commandNotificationId');\r\n    }\r\n    for (let i = 0; i < requiredInputs.length; i++) {\r\n      if (!inputValues[requiredInputs[i]]) {\r\n        check = false;\r\n        setOpenModal(true);\r\n        toast.info('Missing required parameter: ' + requiredInputs[i]);\r\n        break;\r\n      }\r\n    }\r\n    return check;\r\n  };\r\n\r\n  const handleAddNew = async () => {\r\n    let isValid = checkValidateInput();\r\n    if (isValid) {\r\n      let newListDevices = {\r\n        name: name,\r\n        command: command,\r\n        commandNotificationId: selectedOption.id,\r\n      };\r\n      let response = await postCreateNewCommand(newListDevices);\r\n      // console.log('createList', response);\r\n      if (response && response.statusCode === 500) {\r\n        response.message.includes(`JSON parse error`)\r\n          ? toast.error('Contact must be phone number')\r\n          : toast.error(response.message);\r\n      } else if (response && response.status === 200) {\r\n        toast.success(`Create command success`);\r\n        handleCloseModalNewPolicy();\r\n        setResettable(true);\r\n      } else {\r\n        toast.error(response.message);\r\n        handleCloseModalNewPolicy();\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Tooltip arrow placement=\"top\" title=\"Add New Command\">\r\n        <IconButton onClick={handleCreatePolicyClick}>\r\n          <AddBox color=\"primary\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Modal open={openModal} onClose={handleCloseModalNewPolicy}>\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            bgcolor: 'background.paper',\r\n            boxShadow: 24,\r\n            p: 4,\r\n            minWidth: 400,\r\n            width: '65%',\r\n            minHeight: '35%',\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n            Create a new Command\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"name\"\r\n                label=\"Name\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                onChange={(e) => {\r\n                  handleOnchangeInput(e, 'name');\r\n                }}\r\n                value={name}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <ListSelect\r\n                data={Noti}\r\n                handleSelected={handleCommandChange}\r\n                title={'Command'}\r\n                defaultValue={command}\r\n              />\r\n            </Grid>\r\n            {command === 'Notification' ? (\r\n              <Grid item xs={12}>\r\n                <AutoComplete\r\n                  label={'Notification'}\r\n                  selectedOption={selectedOption}\r\n                  setSelectedOption={setSelectedOption}\r\n                />\r\n              </Grid>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Grid>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              marginTop: '1rem',\r\n            }}\r\n          >\r\n            <Button variant=\"contained\" onClick={handleCloseModalNewPolicy}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"contained\" type=\"submit\" onClick={handleAddNew}>\r\n              Save\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewCommandModal;\r\n","import React from 'react';\r\nimport { TextField, Divider, InputAdornment } from '@mui/material';\r\nimport { IconButton, Grid, Tooltip } from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { Close, RestartAlt } from '@mui/icons-material';\r\nimport NewCommandModal from '../Modal/NewCommandModal';\r\n\r\nconst TopBarSetup = (props) => {\r\n  const { searchTerm, setSearchTerm, handleResetTable, handleSearchMode, setResettable } = props;\r\n\r\n  const handleChangeSearchBar = (event) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const handleStartSearchMode = () => {\r\n    if (isSearchTermEmpty) {\r\n      return;\r\n    } else {\r\n      handleSearchMode();\r\n    }\r\n  };\r\n  const handleCloseSearchMode = () => {\r\n    setSearchTerm('');\r\n    handleResetTable();\r\n  };\r\n  const isSearchTermEmpty = searchTerm.trim().length === 0;\r\n\r\n  return (\r\n    <Grid container fullWidth>\r\n      <Grid\r\n        item\r\n        lg={8}\r\n        md={8}\r\n        sm={12}\r\n        xs={12}\r\n        style={{ display: 'flex', justifyContent: 'flex-end' }}\r\n      >\r\n        <TextField\r\n          id=\"search\"\r\n          label=\"Search\"\r\n          variant=\"outlined\"\r\n          placeholder=\"Only search in Policy\"\r\n          size=\"small\"\r\n          value={searchTerm}\r\n          onChange={handleChangeSearchBar}\r\n          edge=\"end\"\r\n          fullWidth\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment>\r\n                <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\r\n                <Tooltip arrow placement=\"top\" title={'Only search in Policy'}>\r\n                  <IconButton\r\n                    type=\"button\"\r\n                    aria-label=\"search\"\r\n                    helperText=\"Search\"\r\n                    onClick={handleStartSearchMode}\r\n                  >\r\n                    <SearchIcon color=\"primary\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        lg={4}\r\n        md={4}\r\n        sm={12}\r\n        xs={12}\r\n        style={{ display: 'flex', justifyContent: 'space-between' }}\r\n      >\r\n        <Grid lg={6} md={6} sm={6} xs={6} style={{ display: 'flex', justifyContent: 'flex-start' }}>\r\n          <Tooltip arrow placement=\"top\" title={'Close Search'}>\r\n            <IconButton type=\"button\" onClick={handleCloseSearchMode} disabled={isSearchTermEmpty}>\r\n              <Close color=\"error\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Grid>\r\n        <Grid lg={6} md={6} sm={6} xs={6} style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n          <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\r\n          <Tooltip arrow placement=\"top\" title=\"Reset table to default\">\r\n            <IconButton color=\"primary\" aria-label=\"clear\" onClick={handleResetTable}>\r\n              <RestartAlt />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <NewCommandModal setResettable={setResettable} />,\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TopBarSetup;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Box, Button, Modal, Typography, TextField, Grid, Autocomplete } from '@mui/material';\r\nimport { Edit } from '@mui/icons-material';\r\nimport { getNotiID, putEditCommand } from 'app/Services/PolicyServices';\r\nimport ListSelect from 'app/components/List/ListSelect';\r\n\r\nfunction AutoComplete({ label, defaultNoti, selectedOption, setSelectedOption }) {\r\n  const [arrNotiId, setArrNotiId] = useState([]);\r\n  const [paramsPage, setParamPage] = useState({\r\n    page: 1,\r\n    limit: 10,\r\n    search: null,\r\n  });\r\n  const [hasSelected, setHasSelected] = useState(false);\r\n\r\n  const handleBarSearch = (event) => {\r\n    setParamPage({ ...paramsPage, search: event.target.value });\r\n    setHasSelected(false);\r\n  };\r\n\r\n  const handleLoadAPagePolicy = async () => {\r\n    let response = await getNotiID(paramsPage);\r\n    if (response.status === 200) {\r\n      let arr = response.data.listResult;\r\n      setArrNotiId(arr);\r\n    }\r\n  };\r\n\r\n  const handleOnChange = (event, newValue) => {\r\n    setSelectedOption(newValue);\r\n    setHasSelected(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleLoadAPagePolicy();\r\n  }, [paramsPage]);\r\n\r\n  useEffect(() => {\r\n    if (!hasSelected && arrNotiId.length > 0) {\r\n      const defaultNotiObj = arrNotiId.find((item) => item.id === defaultNoti);\r\n      setSelectedOption(defaultNotiObj);\r\n      setParamPage({ ...paramsPage, search: null });\r\n      setHasSelected(true);\r\n    }\r\n  }, [hasSelected, arrNotiId, defaultNoti, setSelectedOption, paramsPage]);\r\n\r\n  return (\r\n    <div>\r\n      Recent Notification: {selectedOption ? selectedOption.title : ''}\r\n      <Autocomplete\r\n        options={arrNotiId}\r\n        getOptionLabel={(option) => option.title}\r\n        id=\"include-input-in-list\"\r\n        onChange={handleOnChange}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label={label}\r\n            variant=\"outlined\"\r\n            onChange={handleBarSearch}\r\n            fullWidth\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst EditCommandModal = (props) => {\r\n  const { row, setUpdatetable } = props;\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [command, setCommand] = useState(row.original.command);\r\n  const [name, setName] = useState(row.original.name);\r\n  const preCommand = row.original.command;\r\n  const preName = row.original.name;\r\n  const Noti = ['Reboot', 'Notification'];\r\n  const prevNoti = row.original.commandNotificationId;\r\n  const [selectedOption, setSelectedOption] = React.useState(null);\r\n\r\n  const handleOpenEditDescription = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n  };\r\n\r\n  const handleCloseModalEditDescription = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n  };\r\n\r\n  const handleCommandChange = (command) => {\r\n    setCommand(command);\r\n  };\r\n  const handleNameChange = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  const handleEditCommand = async () => {\r\n    if (preCommand === command && preName === name && prevNoti === selectedOption) {\r\n      toast.info('Nothing changes');\r\n      handleCloseModalEditDescription();\r\n      return;\r\n    }\r\n    if (command === '' || name === '') {\r\n      handleCloseModalEditDescription();\r\n      return;\r\n    }\r\n    let data = {\r\n      id: row.original.id,\r\n      command: command,\r\n      name: name,\r\n      commandNotificationId: selectedOption.id,\r\n    };\r\n    let response = await putEditCommand(data);\r\n    // console.log('editCommandResponse', response);\r\n    if (response && response.status === 200) {\r\n      toast.success(`Change command data success`);\r\n      setUpdatetable(true);\r\n      handleCloseModalEditDescription();\r\n    } else if (response.statusCode === 500) {\r\n      toast.error(`Error: `, response.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={handleOpenEditDescription}>\r\n        <Edit color=\"primary\" />\r\n        <Typography style={{ marginLeft: '8px', color: 'black' }} textTransform=\"none\">\r\n          Edit Command\r\n        </Typography>\r\n      </Button>\r\n      <Modal open={openModal} onClose={handleCloseModalEditDescription}>\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            width: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            bgcolor: 'background.paper',\r\n            boxShadow: 24,\r\n            p: 4,\r\n            minWidth: 400,\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n            Edit\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <ListSelect\r\n                data={Noti}\r\n                handleSelected={handleCommandChange}\r\n                title={'Command'}\r\n                defaultValue={command}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"name\"\r\n                label=\"Name\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                onChange={(event) => handleNameChange(event)}\r\n                value={name}\r\n              />\r\n            </Grid>\r\n            {command === 'Notification' ? (\r\n              <Grid item xs={12}>\r\n                <AutoComplete\r\n                  label={'Notification'}\r\n                  defaultNoti={prevNoti}\r\n                  selectedOption={selectedOption}\r\n                  setSelectedOption={setSelectedOption}\r\n                />\r\n              </Grid>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Grid>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              marginTop: '1rem',\r\n            }}\r\n          >\r\n            <Button variant=\"contained\" onClick={handleCloseModalEditDescription}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"contained\" type=\"submit\" onClick={handleEditCommand}>\r\n              Save\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditCommandModal;\r\n","import React, { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Box, IconButton, Button, Modal, Typography, Tooltip } from '@mui/material';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport { getSingleNotiID } from 'app/Services/PolicyServices';\r\nimport { convertDateTime } from 'app/components/ConvertTimeDate';\r\n\r\nconst CommandNotiIDDetail = (props) => {\r\n  const { id } = props;\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  // const handleResetTable = () => {\r\n  //   setResettable(false);\r\n  // };\r\n  const handleOpenEditDescription = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n    handleLoadDetailCommand();\r\n  };\r\n\r\n  const handleCloseModalEditDescription = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n  };\r\n\r\n  const handleLoadDetailCommand = async () => {\r\n    let response = await getSingleNotiID(id);\r\n    // console.log('detail', response);\r\n    if (response && response.status === 200) {\r\n      setData(response.data);\r\n    } else if (response.statusCode === 500) {\r\n      toast.error(`Error: `, response.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Tooltip arrow placement=\"bottom\" title=\"Detail\">\r\n        <IconButton onClick={handleOpenEditDescription} disabled={id ? false : true}>\r\n          <InfoIcon color=\"primary\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Modal open={openModal} onClose={handleCloseModalEditDescription}>\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            width: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            bgcolor: 'background.paper',\r\n            boxShadow: 24,\r\n            p: 4,\r\n            minWidth: 400,\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n            Detail Notification ID\r\n          </Typography>\r\n          <Typography>ID: {data.id}</Typography>\r\n          <Typography>Title: {data.title}</Typography>\r\n          <Typography>Message: {data.message}</Typography>\r\n          <Typography>Created By: {data.createdBy}</Typography>\r\n          <Typography>Created Date: {convertDateTime(data.createdDate)}</Typography>\r\n          <Typography>Modified By: {data.modifiedBy}</Typography>\r\n          <Typography>Modified Date: {convertDateTime(data.modifiedDate)}</Typography>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'flex-end',\r\n              marginTop: '1rem',\r\n            }}\r\n          >\r\n            <Button variant=\"contained\" onClick={handleCloseModalEditDescription}>\r\n              Cancel\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommandNotiIDDetail;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Box, Card, ThemeProvider, Typography } from '@mui/material';\r\nimport { MaterialReactTable } from 'material-react-table';\r\nimport BottomBarSetup from './BottomBarSetup';\r\nimport TopBarSetup from './TopBarSetup';\r\nimport { toast } from 'react-toastify';\r\nimport EditCommandModal from '../Modal/EditCommandModal';\r\nimport tableTheme from 'app/components/Table/TableTheme';\r\nimport { getAPageCommand } from 'app/Services/PolicyServices';\r\nimport { convertDateTime } from 'app/components/ConvertTimeDate';\r\nimport CommandNotiIDDetail from '../Modal/CommandNotiIDDetail';\r\nconst CommandManageTable = () => {\r\n  const [arrPolicy, setArrPolicy] = useState([]);\r\n  const [paramsPage, setParamPage] = useState({\r\n    page: 1,\r\n    limit: 10,\r\n    policyname: null,\r\n  });\r\n  const [totalPage, setTotalPage] = useState();\r\n  const [updateTable, setUpdateTable] = useState(true);\r\n  const [resetTable, setResetTable] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const handleLoadAPagePolicy = async () => {\r\n    let response = await getAPageCommand(paramsPage);\r\n    // console.log(`Page List: `, response);\r\n    if (response.status === 200) {\r\n      // console.log(`Page List: `, response);\r\n      if (response.data.totalElement === null && searchTerm !== null) {\r\n        toast.error('No elements match');\r\n      }\r\n      let arr = response.data.listResult;\r\n      setArrPolicy(arr);\r\n      setTotalPage(response.data.totalPage);\r\n    }\r\n  };\r\n\r\n  const handleMoveToNextPage = () => {\r\n    if (paramsPage.page < totalPage) {\r\n      setParamPage({ limit: paramsPage.limit, page: paramsPage.page + 1 });\r\n      setUpdateTable(true);\r\n    }\r\n  };\r\n  const handleMoveToPrePage = () => {\r\n    if (paramsPage.page > 1) {\r\n      setParamPage({ limit: paramsPage.limit, page: paramsPage.page - 1 });\r\n      setUpdateTable(true);\r\n    }\r\n  };\r\n\r\n  const handleResetTable = () => {\r\n    setResetTable(true);\r\n    setSearchTerm('');\r\n    // console.log('resetTable');\r\n  };\r\n  const handleSearchMode = () => {\r\n    setParamPage({ ...paramsPage, policyname: searchTerm });\r\n    setUpdateTable(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (resetTable) {\r\n      setParamPage({ page: 1, limit: 10, policyname: null });\r\n      setResetTable(false);\r\n      setUpdateTable(true);\r\n    } else if (updateTable) {\r\n      handleLoadAPagePolicy();\r\n      setUpdateTable(false);\r\n    }\r\n  }, [resetTable, updateTable]);\r\n\r\n  const columns = [\r\n    {\r\n      accessorKey: 'id',\r\n      header: 'ID',\r\n      size: 20,\r\n      enableEditing: false,\r\n      enableFilters: false,\r\n      muiTableHeadCellProps: {\r\n        align: 'center',\r\n      },\r\n      muiTableBodyCellProps: {\r\n        align: 'center',\r\n      },\r\n      Cell: (row) => <span>{row.row.original.id}</span>,\r\n    },\r\n    {\r\n      accessorKey: 'command',\r\n      header: 'Command',\r\n      enableEditing: false,\r\n      enableSorting: false,\r\n    },\r\n    {\r\n      accessorKey: 'name',\r\n      header: 'Name',\r\n      enableEditing: false,\r\n      enableSorting: false,\r\n    },\r\n    {\r\n      accessorKey: 'commandNotificationId',\r\n      header: 'Notification',\r\n      enableEditing: false,\r\n      enableSorting: false,\r\n      Cell: (row) => (\r\n        <Box>\r\n          <CommandNotiIDDetail id={row.row.original.commandNotificationId} />\r\n        </Box>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Card>\r\n      <ThemeProvider theme={tableTheme}>\r\n        <MaterialReactTable\r\n          columns={columns}\r\n          data={arrPolicy}\r\n          options={{ actionsColumnIndex: -1 }}\r\n          enableExpanding\r\n          enableGlobalFilter={false}\r\n          enableColumnFilters={false}\r\n          enableColumnActions={false}\r\n          enablePagination={false}\r\n          enableSorting={false}\r\n          muiTableBodyRowProps={{ hover: false }}\r\n          defaultColumn={{\r\n            maxSize: 120,\r\n            minSize: 10,\r\n            size: 100, //default size is usually 180\r\n          }}\r\n          initialState={{\r\n            columnVisibility: {\r\n              id: false,\r\n            },\r\n            columnOrder: [\r\n              'id',\r\n              'command',\r\n              'name',\r\n              'commandNotificationId',\r\n              'mrt-row-expand',\r\n              'mrt-row-actions',\r\n            ],\r\n          }}\r\n          renderRowActionMenuItems={({ row, table, closeMenu }) => [\r\n            <>\r\n              <Box flexBasis=\"25%\">\r\n                <EditCommandModal row={row} setUpdatetable={setUpdateTable} />\r\n              </Box>\r\n            </>,\r\n          ]}\r\n          displayColumnDefOptions={{ 'mrt-row-actions': { size: 300, header: '' } }}\r\n          renderDetailPanel={({ row }) => (\r\n            <Box\r\n              sx={{\r\n                display: 'grid',\r\n                margin: 'auto',\r\n                gridTemplateColumns: '1fr 1fr',\r\n                width: '100%',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Typography fontSize={'15px'}>\r\n                Created Date: {convertDateTime(row.original.createdDate)}\r\n              </Typography>\r\n              <Typography fontSize={'15px'}>Created By: {row.original.createdBy}</Typography>\r\n              <Typography fontSize={'15px'}>\r\n                Modified Date: {convertDateTime(row.original.modifiedDate)}\r\n              </Typography>\r\n              <Typography fontSize={'15px'}>Modified By: {row.original.modifiedBy}</Typography>\r\n            </Box>\r\n          )}\r\n          renderBottomToolbarCustomActions={() => (\r\n            <BottomBarSetup\r\n              paramsPageDevices={paramsPage}\r\n              totalPage={totalPage}\r\n              handleMoveToPrePage={handleMoveToPrePage}\r\n              handleMoveToNextPage={handleMoveToNextPage}\r\n            />\r\n          )}\r\n          renderTopToolbarCustomActions={() => (\r\n            <TopBarSetup\r\n              searchTerm={searchTerm}\r\n              setSearchTerm={setSearchTerm}\r\n              setResettable={setResetTable}\r\n              handleSearchMode={handleSearchMode}\r\n              handleResetTable={handleResetTable}\r\n            />\r\n          )}\r\n        />\r\n      </ThemeProvider>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CommandManageTable;\r\n","import { Breadcrumb } from 'app/components';\r\nimport { Stack } from '@mui/material';\r\nimport { Container } from 'app/components/TagPage/CustomTag';\r\nimport CommandManagementTable from './CommandManageTable/CommandManageTable';\r\nconst PolicyManage = () => {\r\n  return (\r\n    <Container>\r\n      <Breadcrumb\r\n        routeSegments={[\r\n          { name: 'Policy Manager', path: '/tms-policy/policy-management' },\r\n          { name: 'Command', path: '/tms-policy/command-management' },\r\n        ]}\r\n      />\r\n      <Stack spacing={3}>\r\n        <CommandManagementTable />\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PolicyManage;\r\n"],"sourceRoot":""}