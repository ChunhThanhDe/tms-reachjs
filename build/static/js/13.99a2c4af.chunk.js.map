{"version":3,"sources":["../node_modules/@mui/icons-material/esm/Edit.js","app/components/List/ListSelect.jsx","../node_modules/@mui/icons-material/esm/AddBox.js","app/views/tms-policy/CommandManage/CommandManageTable/BottomBarSetup.js","app/views/tms-policy/CommandManage/Modal/NewCommandModal.js","app/views/tms-policy/CommandManage/CommandManageTable/TopBarSetup.js","app/views/tms-policy/CommandManage/Modal/EditCommandModal.js","app/views/tms-policy/CommandManage/Modal/CommandNotiIDDetail.js","app/views/tms-policy/CommandManage/CommandManageTable/CommandManageTable.js","app/views/tms-policy/CommandManage/CommandManage.js"],"names":["createSvgIcon","_jsx","d","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","getStyles","data","selected","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","ListSelect","props","handleSelected","title","defaultValue","useTheme","_React$useState","React","_React$useState2","_slicedToArray","setSelected","children","_jsxs","FormControl","sx","InputLabel","id","Select","labelId","value","onChange","event","target","input","OutlinedInput","label","map","MenuItem","BottomBarSetup","paramsPageDevices","totalPage","handleMoveToPrePage","handleMoveToNextPage","Grid","container","fullWidth","item","lg","md","sm","xs","display","justifyContent","Tooltip","IconButton","disabled","page","onClick","NavigateBefore","NavigateNextIcon","AutoComplete","_ref","selectedOption","setSelectedOption","_useState","useState","_useState2","arrNotiId","setArrNotiId","_useState3","limit","search","_useState4","paramsPage","setParamPage","_useState5","_useState6","hasSelected","setHasSelected","handleBarSearch","_objectSpread","handleLoadAPagePolicy","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","arr","wrap","_context","prev","next","getNotiID","sent","status","listResult","console","log","stop","apply","arguments","useEffect","Autocomplete","options","getOptionLabel","option","newValue","renderInput","params","TextField","variant","NewCommandModal","setResettable","_useState7","_useState8","openModal","setOpenModal","_useState9","_useState10","name","setName","_useState11","_useState12","command","setCommand","handleCloseModalNewPolicy","prevState","checkValidateInput","check","inputValues","commandNotificationId","requiredInputs","push","i","length","toast","info","handleAddNew","_ref3","_callee2","newListDevices","_context2","postCreateNewCommand","statusCode","message","includes","error","success","_Fragment","arrow","placement","AddBox","color","Modal","open","onClose","Box","position","top","left","transform","bgcolor","boxShadow","p","minWidth","minHeight","Typography","component","gutterBottom","spacing","margin","e","handleOnchangeInput","bottom","padding","backgroundColor","zIndex","Button","type","TopBarSetup","searchTerm","setSearchTerm","handleResetTable","handleSearchMode","isSearchTermEmpty","trim","placeholder","size","edge","InputProps","endAdornment","InputAdornment","Divider","height","m","orientation","helperText","SearchIcon","Close","RestartAlt","defaultNoti","defaultNotiObj","find","EditCommandModal","row","setUpdatetable","original","preCommand","preName","prevNoti","handleCloseModalEditDescription","handleEditCommand","abrupt","putEditCommand","Edit","marginLeft","handleNameChange","marginTop","CommandNotiIDDetail","setData","handleLoadDetailCommand","getSingleNotiID","InfoIcon","createdBy","convertDateTime","createdDate","modifiedBy","modifiedDate","CommandManageTable","arrPolicy","setArrPolicy","policyname","setTotalPage","updateTable","setUpdateTable","resetTable","setResetTable","getAPageCommand","totalElement","columns","accessorKey","header","enableEditing","enableFilters","muiTableHeadCellProps","align","muiTableBodyCellProps","Cell","enableSorting","Card","ThemeProvider","tableTheme","MaterialReactTable","actionsColumnIndex","enableExpanding","enableGlobalFilter","enableColumnFilters","enableColumnActions","enablePagination","muiTableBodyRowProps","hover","defaultColumn","maxSize","minSize","initialState","columnVisibility","columnOrder","renderRowActionMenuItems","table","closeMenu","displayColumnDefOptions","renderDetailPanel","gridTemplateColumns","alignItems","fontSize","renderBottomToolbarCustomActions","renderTopToolbarCustomActions","PolicyManage","Container","Breadcrumb","routeSegments","path","Stack","CommandManagementTable"],"mappings":"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","file":"static/js/13.99a2c4af.chunk.js","sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');","import * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\nconst ITEM_HEIGHT = 35;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nfunction getStyles(data, selected, theme) {\r\n  return {\r\n    fontWeight:\r\n      selected.indexOf(data) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nexport default function ListSelect(props) {\r\n  const { data, handleSelected, title, defaultValue } = props;\r\n  const theme = useTheme();\r\n  const [selected, setSelected] = React.useState([]);\r\n\r\n  const handleChange = (event) => {\r\n    setSelected(event.target.value);\r\n    handleSelected(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl sx={{ width: '100%' }}>\r\n        <InputLabel id=\"list-select\">{title}</InputLabel>\r\n        <Select\r\n          labelId=\"list-select\"\r\n          id=\"list-select\"\r\n          value={defaultValue ? defaultValue : ''}\r\n          //   defaultValue={defaultValue}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput label={title} />}\r\n          MenuProps={MenuProps}\r\n        >\r\n          {data.map((data) => (\r\n            <MenuItem key={data} value={data} style={getStyles(data, selected, theme)}>\r\n              {data}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n}), 'AddBox');","import React from 'react';\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\nimport { IconButton, Grid, Tooltip } from '@mui/material';\r\nimport { NavigateBefore } from '@mui/icons-material';\r\n\r\nconst BottomBarSetup = (props) => {\r\n  const { paramsPageDevices, totalPage, handleMoveToPrePage, handleMoveToNextPage } = props;\r\n\r\n  return (\r\n    <Grid container fullWidth>\r\n      <Grid\r\n        item\r\n        lg={8}\r\n        md={8}\r\n        sm={12}\r\n        xs={12}\r\n        style={{ display: 'flex', justifyContent: 'flex-end' }}\r\n      ></Grid>\r\n      <Grid\r\n        item\r\n        lg={4}\r\n        md={4}\r\n        sm={12}\r\n        xs={12}\r\n        style={{ display: 'flex', justifyContent: 'flex-end' }}\r\n      >\r\n        <span>\r\n          <Tooltip title=\"Previous page\">\r\n            <IconButton disabled={paramsPageDevices.page === 1} onClick={handleMoveToPrePage}>\r\n              <NavigateBefore />\r\n            </IconButton>\r\n          </Tooltip>\r\n          Page {paramsPageDevices.page} of {totalPage}\r\n          <Tooltip title=\"Next page\">\r\n            <IconButton\r\n              disabled={paramsPageDevices.page === totalPage}\r\n              onClick={handleMoveToNextPage}\r\n            >\r\n              <NavigateNextIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </span>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default BottomBarSetup;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  Button,\r\n  Modal,\r\n  Typography,\r\n  TextField,\r\n  Grid,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport { AddBox } from '@mui/icons-material';\r\nimport { getNotiID, postCreateNewCommand } from 'app/Services/PolicyServices';\r\nimport ListSelect from 'app/components/List/ListSelect';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\n\r\nfunction AutoComplete({ label, selectedOption, setSelectedOption }) {\r\n  const [arrNotiId, setArrNotiId] = useState([]);\r\n  const [paramsPage, setParamPage] = useState({\r\n    page: 1,\r\n    limit: 10,\r\n    search: null,\r\n  });\r\n  const [hasSelected, setHasSelected] = useState(false);\r\n\r\n  const handleBarSearch = (event) => {\r\n    setParamPage({ ...paramsPage, search: event.target.value });\r\n    setHasSelected(false);\r\n  };\r\n\r\n  const handleLoadAPagePolicy = async () => {\r\n    let response = await getNotiID(paramsPage);\r\n    if (response.status === 200) {\r\n      let arr = response.data.listResult;\r\n      console.log(arr);\r\n      setArrNotiId(arr);\r\n    }\r\n  };\r\n\r\n  const handleOnChange = (event, newValue) => {\r\n    setSelectedOption(newValue);\r\n    console.log(newValue);\r\n    setHasSelected(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleLoadAPagePolicy();\r\n  }, [paramsPage]);\r\n\r\n  useEffect(() => {\r\n    if (!hasSelected) {\r\n      setParamPage({ ...paramsPage, search: null });\r\n    }\r\n  }, [hasSelected]);\r\n\r\n  return (\r\n    <div>\r\n      <Autocomplete\r\n        options={arrNotiId}\r\n        getOptionLabel={(option) => option.title}\r\n        id=\"include-input-in-list\"\r\n        value={selectedOption}\r\n        onChange={handleOnChange}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label={label}\r\n            variant=\"standard\"\r\n            onChange={handleBarSearch}\r\n            fullWidth\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NewCommandModal = (props) => {\r\n  const { setResettable } = props;\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [command, setCommand] = useState('');\r\n  const [selectedOption, setSelectedOption] = React.useState(null);\r\n  const Noti = ['Reboot', 'Notification'];\r\n\r\n  const handleCreatePolicyClick = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n  };\r\n\r\n  const handleCloseModalNewPolicy = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n    setCommand('');\r\n    setName('');\r\n  };\r\n\r\n  const handleCommandChange = (command) => {\r\n    setCommand(command);\r\n  };\r\n\r\n  const handleOnchangeInput = (e, id) => {\r\n    switch (id) {\r\n      case 'name':\r\n        setName(e.target.value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  const checkValidateInput = () => {\r\n    let check = true;\r\n    const inputValues = {\r\n      name: name,\r\n      command: command,\r\n      commandNotificationId: selectedOption.id,\r\n    };\r\n    const requiredInputs = ['command', 'name'];\r\n    if (command === 'Notification') {\r\n      requiredInputs.push('commandNotificationId');\r\n    }\r\n    for (let i = 0; i < requiredInputs.length; i++) {\r\n      if (!inputValues[requiredInputs[i]]) {\r\n        check = false;\r\n        setOpenModal(true);\r\n        toast.info('Missing required parameter: ' + requiredInputs[i]);\r\n        break;\r\n      }\r\n    }\r\n    return check;\r\n  };\r\n\r\n  const handleAddNew = async () => {\r\n    let isValid = checkValidateInput();\r\n    if (isValid) {\r\n      let newListDevices = {\r\n        name: name,\r\n        command: command,\r\n        commandNotificationId: selectedOption.id,\r\n      };\r\n      let response = await postCreateNewCommand(newListDevices);\r\n      console.log('createList', response);\r\n      if (response && response.statusCode === 500) {\r\n        response.message.includes(`JSON parse error`)\r\n          ? toast.error('Contact must be phone number')\r\n          : toast.error(response.message);\r\n      } else if (response && response.status === 200) {\r\n        toast.success(`Create command success`);\r\n        handleCloseModalNewPolicy();\r\n        setResettable(true);\r\n      } else {\r\n        toast.error(response.message);\r\n        handleCloseModalNewPolicy();\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Tooltip arrow placement=\"top\" title=\"Add New Command\">\r\n        <IconButton onClick={handleCreatePolicyClick}>\r\n          <AddBox color=\"primary\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Modal open={openModal} onClose={handleCloseModalNewPolicy}>\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            bgcolor: 'background.paper',\r\n            boxShadow: 24,\r\n            p: 4,\r\n            minWidth: 400,\r\n            width: '65%',\r\n            minHeight: '45%',\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n            Create a new Command\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"name\"\r\n                label=\"Name\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                onChange={(e) => {\r\n                  handleOnchangeInput(e, 'name');\r\n                }}\r\n                value={name}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <ListSelect\r\n                data={Noti}\r\n                handleSelected={handleCommandChange}\r\n                title={'Command'}\r\n                defaultValue={command}\r\n              />\r\n            </Grid>\r\n            {command === 'Notification' ? (\r\n              <Grid item xs={12}>\r\n                <AutoComplete\r\n                  label={'Notification'}\r\n                  selectedOption={selectedOption}\r\n                  setSelectedOption={setSelectedOption}\r\n                />\r\n              </Grid>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Grid>\r\n          <Box\r\n            sx={{\r\n              position: 'fixed',\r\n              bottom: '1rem',\r\n              left: '50%',\r\n              transform: 'translate(-50%, 0)',\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              width: '400px',\r\n              padding: '0 1rem',\r\n              backgroundColor: 'white',\r\n              zIndex: 999,\r\n            }}\r\n          >\r\n            <Button variant=\"contained\" onClick={handleCloseModalNewPolicy}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"contained\" type=\"submit\" onClick={handleAddNew}>\r\n              Save\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewCommandModal;\r\n","import React from 'react';\r\nimport { TextField, Divider, InputAdornment } from '@mui/material';\r\nimport { IconButton, Grid, Tooltip } from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { Close, RestartAlt } from '@mui/icons-material';\r\nimport NewCommandModal from '../Modal/NewCommandModal';\r\n\r\nconst TopBarSetup = (props) => {\r\n  const { searchTerm, setSearchTerm, handleResetTable, handleSearchMode, setResettable } = props;\r\n\r\n  const handleChangeSearchBar = (event) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const handleStartSearchMode = () => {\r\n    if (isSearchTermEmpty) {\r\n      return;\r\n    } else {\r\n      handleSearchMode();\r\n    }\r\n  };\r\n  const handleCloseSearchMode = () => {\r\n    setSearchTerm('');\r\n    handleResetTable();\r\n  };\r\n  const isSearchTermEmpty = searchTerm.trim().length === 0;\r\n\r\n  return (\r\n    <Grid container fullWidth>\r\n      <Grid\r\n        item\r\n        lg={8}\r\n        md={8}\r\n        sm={12}\r\n        xs={12}\r\n        style={{ display: 'flex', justifyContent: 'flex-end' }}\r\n      >\r\n        <TextField\r\n          id=\"search\"\r\n          type=\"search\"\r\n          label=\"Search\"\r\n          variant=\"outlined\"\r\n          placeholder=\"Only search in Policy\"\r\n          size=\"small\"\r\n          value={searchTerm}\r\n          onChange={handleChangeSearchBar}\r\n          edge=\"end\"\r\n          fullWidth\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment>\r\n                <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\r\n                <Tooltip arrow placement=\"top\" title={'Only search in Policy'}>\r\n                  <IconButton\r\n                    type=\"button\"\r\n                    aria-label=\"search\"\r\n                    helperText=\"Search\"\r\n                    onClick={handleStartSearchMode}\r\n                  >\r\n                    <SearchIcon color=\"primary\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        lg={4}\r\n        md={4}\r\n        sm={12}\r\n        xs={12}\r\n        style={{ display: 'flex', justifyContent: 'space-between' }}\r\n      >\r\n        <Grid lg={6} md={6} sm={6} xs={6} style={{ display: 'flex', justifyContent: 'flex-start' }}>\r\n          <Tooltip arrow placement=\"top\" title={'Close Search'}>\r\n            <IconButton type=\"button\" onClick={handleCloseSearchMode} disabled={isSearchTermEmpty}>\r\n              <Close color=\"error\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Grid>\r\n        <Grid lg={6} md={6} sm={6} xs={6} style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n          <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\r\n          <Tooltip arrow placement=\"top\" title=\"Reset table to default\">\r\n            <IconButton color=\"primary\" aria-label=\"clear\" onClick={handleResetTable}>\r\n              <RestartAlt />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <NewCommandModal setResettable={setResettable} />,\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TopBarSetup;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  Button,\r\n  Modal,\r\n  Typography,\r\n  TextField,\r\n  Grid,\r\n  Autocomplete,\r\n  // Tooltip,\r\n} from '@mui/material';\r\nimport { Edit } from '@mui/icons-material';\r\nimport { getNotiID, putEditCommand } from 'app/Services/PolicyServices';\r\nimport ListSelect from 'app/components/List/ListSelect';\r\n\r\nfunction AutoComplete({ label, defaultNoti, selectedOption, setSelectedOption }) {\r\n  const [arrNotiId, setArrNotiId] = useState([]);\r\n  const [paramsPage, setParamPage] = useState({\r\n    page: 1,\r\n    limit: 10,\r\n    search: null,\r\n  });\r\n  const [hasSelected, setHasSelected] = useState(false);\r\n\r\n  const handleBarSearch = (event) => {\r\n    setParamPage({ ...paramsPage, search: event.target.value });\r\n    setHasSelected(false);\r\n  };\r\n\r\n  const handleLoadAPagePolicy = async () => {\r\n    let response = await getNotiID(paramsPage);\r\n    if (response.status === 200) {\r\n      let arr = response.data.listResult;\r\n      setArrNotiId(arr);\r\n    }\r\n  };\r\n\r\n  const handleOnChange = (event, newValue) => {\r\n    setSelectedOption(newValue);\r\n    setHasSelected(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleLoadAPagePolicy();\r\n  }, [paramsPage]);\r\n\r\n  useEffect(() => {\r\n    if (!hasSelected && arrNotiId.length > 0) {\r\n      const defaultNotiObj = arrNotiId.find((item) => item.id === defaultNoti);\r\n      setSelectedOption(defaultNotiObj);\r\n      setParamPage({ ...paramsPage, search: null });\r\n      setHasSelected(true);\r\n    }\r\n  }, [hasSelected, arrNotiId, defaultNoti, setSelectedOption, paramsPage]);\r\n\r\n  return (\r\n    <div>\r\n      Recent Notification: {selectedOption ? selectedOption.title : ''}\r\n      <Autocomplete\r\n        options={arrNotiId}\r\n        getOptionLabel={(option) => option.title}\r\n        id=\"include-input-in-list\"\r\n        onChange={handleOnChange}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label={label}\r\n            variant=\"standard\"\r\n            onChange={handleBarSearch}\r\n            fullWidth\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst EditCommandModal = (props) => {\r\n  const { row, setUpdatetable } = props;\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [command, setCommand] = useState(row.original.command);\r\n  const [name, setName] = useState(row.original.name);\r\n  const preCommand = row.original.command;\r\n  const preName = row.original.name;\r\n  const Noti = ['Reboot', 'Notification'];\r\n  const prevNoti = row.original.commandNotificationId;\r\n  const [selectedOption, setSelectedOption] = React.useState(null);\r\n\r\n  const handleOpenEditDescription = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n  };\r\n\r\n  const handleCloseModalEditDescription = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n  };\r\n\r\n  const handleCommandChange = (command) => {\r\n    setCommand(command);\r\n  };\r\n  const handleNameChange = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  const handleEditCommand = async () => {\r\n    if (preCommand === command && preName === name && prevNoti === selectedOption) {\r\n      toast.info('Nothing changes');\r\n      handleCloseModalEditDescription();\r\n      return;\r\n    }\r\n    if (command === '' || name === '') {\r\n      handleCloseModalEditDescription();\r\n      return;\r\n    }\r\n    let data = {\r\n      id: row.original.id,\r\n      command: command,\r\n      name: name,\r\n      commandNotificationId: selectedOption.id,\r\n    };\r\n    let response = await putEditCommand(data);\r\n    console.log('editCommandResponse', response);\r\n    if (response && response.status === 200) {\r\n      toast.success(`Change command data success`);\r\n      setUpdatetable(true);\r\n      handleCloseModalEditDescription();\r\n    } else if (response.statusCode === 500) {\r\n      toast.error(`Error: `, response.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <Tooltip arrow placement=\"bottom\" title=\"Edit Policy\"> */}\r\n      <IconButton onClick={handleOpenEditDescription}>\r\n        <Edit color=\"primary\" />\r\n        <Typography style={{ marginLeft: '8px', color: 'black' }}>Edit Command</Typography>\r\n      </IconButton>\r\n      {/* </Tooltip> */}\r\n      <Modal open={openModal} onClose={handleCloseModalEditDescription}>\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            width: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            bgcolor: 'background.paper',\r\n            boxShadow: 24,\r\n            p: 4,\r\n            minWidth: 400,\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n            Edit\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <ListSelect\r\n                data={Noti}\r\n                handleSelected={handleCommandChange}\r\n                title={'Command'}\r\n                defaultValue={command}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"name\"\r\n                label=\"Name\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                onChange={(event) => handleNameChange(event)}\r\n                value={name}\r\n              />\r\n            </Grid>\r\n            {command === 'Notification' ? (\r\n              <Grid item xs={12}>\r\n                <AutoComplete\r\n                  label={'Notification'}\r\n                  defaultNoti={prevNoti}\r\n                  selectedOption={selectedOption}\r\n                  setSelectedOption={setSelectedOption}\r\n                />\r\n              </Grid>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Grid>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              marginTop: '1rem',\r\n            }}\r\n          >\r\n            <Button variant=\"contained\" onClick={handleCloseModalEditDescription}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"contained\" type=\"submit\" onClick={handleEditCommand}>\r\n              Save\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditCommandModal;\r\n","import React, { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Box, IconButton, Button, Modal, Typography, Tooltip } from '@mui/material';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport { getSingleNotiID } from 'app/Services/PolicyServices';\r\nimport { convertDateTime } from 'app/components/ConvertTimeDate';\r\n\r\nconst CommandNotiIDDetail = (props) => {\r\n  const { id } = props;\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  // const handleResetTable = () => {\r\n  //   setResettable(false);\r\n  // };\r\n  const handleOpenEditDescription = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n    handleLoadDetailCommand();\r\n  };\r\n\r\n  const handleCloseModalEditDescription = () => {\r\n    setOpenModal((prevState) => !prevState);\r\n  };\r\n\r\n  const handleLoadDetailCommand = async () => {\r\n    let response = await getSingleNotiID(id);\r\n    console.log('detail', response);\r\n    if (response && response.status === 200) {\r\n      setData(response.data);\r\n    } else if (response.statusCode === 500) {\r\n      toast.error(`Error: `, response.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Tooltip arrow placement=\"bottom\" title=\"Detail\">\r\n        <IconButton onClick={handleOpenEditDescription} disabled={id ? false : true}>\r\n          <InfoIcon color=\"primary\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Modal open={openModal} onClose={handleCloseModalEditDescription}>\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            width: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            bgcolor: 'background.paper',\r\n            boxShadow: 24,\r\n            p: 4,\r\n            minWidth: 400,\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n            Detail Notification ID\r\n          </Typography>\r\n          <Typography>ID: {data.id}</Typography>\r\n          <Typography>Title: {data.title}</Typography>\r\n          <Typography>Message: {data.message}</Typography>\r\n          <Typography>Created By: {data.createdBy}</Typography>\r\n          <Typography>Created Date: {convertDateTime(data.createdDate)}</Typography>\r\n          <Typography>Modified By: {data.modifiedBy}</Typography>\r\n          <Typography>Modified Date: {convertDateTime(data.modifiedDate)}</Typography>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'flex-end',\r\n              marginTop: '1rem',\r\n            }}\r\n          >\r\n            <Button variant=\"contained\" onClick={handleCloseModalEditDescription}>\r\n              Cancel\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommandNotiIDDetail;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Box, Card, ThemeProvider, Typography } from '@mui/material';\r\nimport { MaterialReactTable } from 'material-react-table';\r\nimport BottomBarSetup from './BottomBarSetup';\r\nimport TopBarSetup from './TopBarSetup';\r\nimport { toast } from 'react-toastify';\r\nimport EditCommandModal from '../Modal/EditCommandModal';\r\nimport tableTheme from 'app/components/Table/TableTheme';\r\nimport { getAPageCommand } from 'app/Services/PolicyServices';\r\nimport { convertDateTime } from 'app/components/ConvertTimeDate';\r\nimport CommandNotiIDDetail from '../Modal/CommandNotiIDDetail';\r\nconst CommandManageTable = () => {\r\n  const [arrPolicy, setArrPolicy] = useState([]);\r\n  const [paramsPage, setParamPage] = useState({\r\n    page: 1,\r\n    limit: 10,\r\n    policyname: null,\r\n  });\r\n  const [totalPage, setTotalPage] = useState();\r\n  const [updateTable, setUpdateTable] = useState(true);\r\n  const [resetTable, setResetTable] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const handleLoadAPagePolicy = async () => {\r\n    console.log(paramsPage);\r\n    let response = await getAPageCommand(paramsPage);\r\n    console.log(`Page List: `, response);\r\n    if (response.status === 200) {\r\n      // console.log(`Page List: `, response);\r\n      if (response.data.totalElement === null && searchTerm !== null) {\r\n        toast.error('No elements match');\r\n      }\r\n      let arr = response.data.listResult;\r\n      setArrPolicy(arr);\r\n      setTotalPage(response.data.totalPage);\r\n    }\r\n  };\r\n\r\n  const handleMoveToNextPage = () => {\r\n    if (paramsPage.page < totalPage) {\r\n      setParamPage({ limit: paramsPage.limit, page: paramsPage.page + 1 });\r\n      setUpdateTable(true);\r\n    }\r\n  };\r\n  const handleMoveToPrePage = () => {\r\n    if (paramsPage.page > 1) {\r\n      setParamPage({ limit: paramsPage.limit, page: paramsPage.page - 1 });\r\n      setUpdateTable(true);\r\n    }\r\n  };\r\n\r\n  const handleResetTable = () => {\r\n    setResetTable(true);\r\n    setSearchTerm('');\r\n    // console.log('resetTable');\r\n  };\r\n  const handleSearchMode = () => {\r\n    setParamPage({ ...paramsPage, policyname: searchTerm });\r\n    setUpdateTable(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (resetTable) {\r\n      setParamPage({ page: 1, limit: 10, policyname: null });\r\n      setResetTable(false);\r\n      setUpdateTable(true);\r\n    } else if (updateTable) {\r\n      console.log('change status');\r\n      handleLoadAPagePolicy();\r\n      setUpdateTable(false);\r\n    }\r\n  }, [resetTable, updateTable]);\r\n\r\n  const columns = [\r\n    {\r\n      accessorKey: 'id',\r\n      header: 'ID',\r\n      size: 20,\r\n      enableEditing: false,\r\n      enableFilters: false,\r\n      muiTableHeadCellProps: {\r\n        align: 'center',\r\n      },\r\n      muiTableBodyCellProps: {\r\n        align: 'center',\r\n      },\r\n      Cell: (row) => <span>{row.row.original.id}</span>,\r\n    },\r\n    {\r\n      accessorKey: 'command',\r\n      header: 'Command',\r\n      enableEditing: false,\r\n      enableSorting: false,\r\n    },\r\n    {\r\n      accessorKey: 'name',\r\n      header: 'Name',\r\n      enableEditing: false,\r\n      enableSorting: false,\r\n    },\r\n    {\r\n      accessorKey: 'commandNotificationId',\r\n      header: 'Notification',\r\n      enableEditing: false,\r\n      enableSorting: false,\r\n      Cell: (row) => (\r\n        <Box>\r\n          <CommandNotiIDDetail id={row.row.original.commandNotificationId} />\r\n        </Box>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Card>\r\n      <ThemeProvider theme={tableTheme}>\r\n        <MaterialReactTable\r\n          columns={columns}\r\n          data={arrPolicy}\r\n          options={{ actionsColumnIndex: -1 }}\r\n          enableExpanding\r\n          enableGlobalFilter={false}\r\n          enableColumnFilters={false}\r\n          enableColumnActions={false}\r\n          enablePagination={false}\r\n          enableSorting={false}\r\n          muiTableBodyRowProps={{ hover: false }}\r\n          defaultColumn={{\r\n            maxSize: 120,\r\n            minSize: 10,\r\n            size: 100, //default size is usually 180\r\n          }}\r\n          initialState={{\r\n            columnVisibility: {\r\n              id: false,\r\n            },\r\n            columnOrder: [\r\n              'id',\r\n              'command',\r\n              'name',\r\n              'commandNotificationId',\r\n              'mrt-row-expand',\r\n              'mrt-row-actions',\r\n            ],\r\n          }}\r\n          renderRowActionMenuItems={({ row, table, closeMenu }) => [\r\n            <Box>\r\n              <EditCommandModal row={row} setUpdatetable={setUpdateTable} />\r\n            </Box>,\r\n          ]}\r\n          displayColumnDefOptions={{ 'mrt-row-actions': { size: 300, header: '' } }}\r\n          renderDetailPanel={({ row }) => (\r\n            <Box\r\n              sx={{\r\n                display: 'grid',\r\n                margin: 'auto',\r\n                gridTemplateColumns: '1fr 1fr',\r\n                width: '100%',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Typography fontSize={'15px'}>\r\n                Created Date: {convertDateTime(row.original.createdDate)}\r\n              </Typography>\r\n              <Typography fontSize={'15px'}>Created By: {row.original.createdBy}</Typography>\r\n              <Typography fontSize={'15px'}>\r\n                Modified Date: {convertDateTime(row.original.modifiedDate)}\r\n              </Typography>\r\n              <Typography fontSize={'15px'}>Modified By: {row.original.modifiedBy}</Typography>\r\n            </Box>\r\n          )}\r\n          renderBottomToolbarCustomActions={() => (\r\n            <BottomBarSetup\r\n              paramsPageDevices={paramsPage}\r\n              totalPage={totalPage}\r\n              handleMoveToPrePage={handleMoveToPrePage}\r\n              handleMoveToNextPage={handleMoveToNextPage}\r\n            />\r\n          )}\r\n          renderTopToolbarCustomActions={() => (\r\n            <TopBarSetup\r\n              searchTerm={searchTerm}\r\n              setSearchTerm={setSearchTerm}\r\n              setResettable={setResetTable}\r\n              handleSearchMode={handleSearchMode}\r\n              handleResetTable={handleResetTable}\r\n            />\r\n          )}\r\n        />\r\n      </ThemeProvider>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CommandManageTable;\r\n","import { Breadcrumb } from 'app/components';\r\nimport { Stack } from '@mui/material';\r\nimport { Container } from 'app/components/TagPage/CustomTag';\r\nimport CommandManagementTable from './CommandManageTable/CommandManageTable';\r\nconst PolicyManage = () => {\r\n  return (\r\n    <Container>\r\n      <Breadcrumb\r\n        routeSegments={[\r\n          { name: 'Policy Manager', path: '/tms-policy/policy-management' },\r\n          { name: 'Command', path: '/tms-policy/command-management' },\r\n        ]}\r\n      />\r\n      <Stack spacing={3}>\r\n        <CommandManagementTable />\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PolicyManage;\r\n"],"sourceRoot":""}